names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[a],xee[296],xee[c])
cesi$Truth <- c(xes[a],xes[296],xes[c])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
print(xtable(cesi,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap $\\Delta$ES measurements for Skewed Errors",label="calibratedes"),include.rownames=FALSE)
install.packages("stran")
install.packages("rstan")
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda = sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy = beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
library(rstan)
?stan
library(StanHeaders)
?stan
sessionInfo()
library(rstan)
sessionInfo()
library(rstan)
library(StanHeaders)
sessionInfo()
library(rstan)
sessionInfo()
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(inline)
fx <- cxxfunction(signature(x = "numeric"),'NumericVector xx(x);
return wrap(std::accumulate(xx.begin(), xx.end(), 0.0));',plugin = "Rcpp")
fx(c(1,2,3))
library(rstan)
library(ggplot2)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
?solve
library(rstan)
?stan
setwd("C:\\Users\\dcries\\github\\ra_dot")
d <- read.csv('data\\completedata_nona.csv')
load("/home/dcries/ra_dot/neighbors.RData")
setwd("C:\\Users\\dcries\\github\\ra_dot")
load("neighbors.RData")
neighbors <- list(ljno0=ljno0, lj0=lj0 ,
lu = lu,j = j, k=k,
w=w,
scolw = scolw,
omub=omub,nomub=nomub,
lomub=length(omub),lnomub=length(nomub))
length(omub)
lnomub=length(nomub)
lnomub
getwd()
save(neighbors,file="neighbors_reduced.RData")
setwd("C:\\Users\\dcries\\github\\ra_dot")
load("neighbors_reduced.RData")
names(neighbors)
d <- read.csv('/home/dcries/ra_dot/data/completedata_nona.csv')
setwd("C:\\Users\\dcries\\github\\ra_dot")
d <- read.csv('data/completedata_nona.csv')
d$ACCESSCNTL <- as.factor(d$ACCESSCNTL)
d$TRANSCENTE <- as.factor(d$TRANSCENTE)
d$VOLUME <- as.numeric(d$VOLUME)
X <- as.data.frame(model.matrix(
~ ACCESSCNTL+TRANSCENTE+VOLUME, data=d))
dataList = list(
Y = d$FATMAJCRASHES,
N = length(d$FATMAJCRASHES),
ljno0=neighbors$ljno0,
lj0=neighbors$lj0 ,
lu = neighbors$lu,
log_l = log(d$MILES),
X = X,
K = length(X[1,]),
Nseg=length(unique(d$TASLINKID)),
j = neighbors$j, k=neighbors$k,
w=neighbors$w,
scolw = neighbors$scolw,
omub=neighbors$omub,nomub=neighbors$nomub,
lomub=length(omub),lnomub=length(nomub)
)
dataList = list(
Y = d$FATMAJCRASHES,
N = length(d$FATMAJCRASHES),
ljno0=neighbors$ljno0,
lj0=neighbors$lj0 ,
lu = neighbors$lu,
log_l = log(d$MILES),
X = X,
K = length(X[1,]),
Nseg=length(unique(d$TASLINKID)),
j = neighbors$j, k=neighbors$k,
w=neighbors$w,
scolw = neighbors$scolw,
omub=neighbors$omub,nomub=neighbors$nomub,
lomub=length(neighbors$omub),lnomub=length(neighbors$nomub)
)
table(d$FEDFUNC)
sort(names(d))
table(d$MEDTYPE2)
table(d$SYSCODE)
table(d$URBAN)
table(d$NUMLANES)
class(d$PSIRATING)
head(d$PSIRATING)
summary(d$PSIRATING)
load("C:/Users/dcries/github/ra_dot/neighbors.RData")
length(jno0)
length(j0)
neighbors$jno0 <- jno0
neighbors$j0 <- j0
getwd()
save(neighbors,file="neighbors_reduced.RData")
dim(X)
X <- as.data.frame(model.matrix(
~ TRANSCENTE+lVOLUME+FEDFUNC+MEDTYPE2+SYSCODE+URBAN, data=d))
X <- as.data.frame(model.matrix(
~ ACCESSCNTL+TRANSCENTE+lVOLUME, data=d))
d$ACCESSCNTL <- as.factor(d$ACCESSCNTL)
d$TRANSCENTE <- as.factor(d$TRANSCENTE)
d$lVOLUME <- log(as.numeric(d$VOLUME))
X <- as.data.frame(model.matrix(
~ ACCESSCNTL+TRANSCENTE+lVOLUME, data=d))
dim(X)
head(X)
d$ACCESSCNTL <- as.factor(d$ACCESSCNTL)
d$TRANSCENTE <- as.factor(d$TRANSCENTE)
d$lVOLUME <- log(as.numeric(d$VOLUME))
d$FEDFUNC <- as.factor(d$FEDFUNC)
d$MEDTYPE2 <- as.factor(d$MEDTYPE2)
d$SYSCODE <- as.factor(d$SYSCODE)
d$TERRAIN <- as.factor(d$TERRAIN)
d$COMNETWORK <- as.factor(d$COMNETWORK)
d$NATHWYSYS <- as.factor(d$NATHWYSYS)
X <- as.data.frame(model.matrix(
~ TRANSCENTE+lVOLUME+FEDFUNC+MEDTYPE2+SYSCODE+URBAN+MEDWIDTH+TERRAIN+PSIRATING+
ACCESSCNTL+COMNETWORK+NATHWYSYS, data=d))
d <- d[1:2000,]
d$ACCESSCNTL <- as.factor(d$ACCESSCNTL)
d$TRANSCENTE <- as.factor(d$TRANSCENTE)
d$lVOLUME <- log(as.numeric(d$VOLUME))
d$FEDFUNC <- as.factor(d$FEDFUNC)
d$MEDTYPE2 <- as.factor(d$MEDTYPE2)
d$SYSCODE <- as.factor(d$SYSCODE)
d$TERRAIN <- as.factor(d$TERRAIN)
d$COMNETWORK <- as.factor(d$COMNETWORK)
d$NATHWYSYS <- as.factor(d$NATHWYSYS)
X <- as.data.frame(model.matrix(
~ TRANSCENTE+lVOLUME+FEDFUNC+MEDTYPE2+SYSCODE+URBAN+MEDWIDTH+TERRAIN+PSIRATING+
ACCESSCNTL+COMNETWORK+NATHWYSYS, data=d))
getwd()
dot <- read.csv("data/completedata_nona.csv")
which(dot$TASLINKID==2013052421)
library(readr)
SPF_TwoLane_Data_Review <- read_csv("//my.files.iastate.edu/Users/dcries/Desktop/SPF_TwoLane_Data_Review.xlsx")
View(SPF_TwoLane_Data_Review)
library(readr)
correct <- read_csv("//my.files.iastate.edu/Users/dcries/Desktop/SPF_TwoLane_Data_Review.csv")
View(correct)
terrain_0_2 <- correct$TASLINKID[correct[,3]=="TERRAIN=2"]
terrain_0_2
terrain_0_1 <- correct$TASLINKID[correct[,3]=="TERRAIN=1"]
table(dot$SYSCODE)
rm_taslink <- c(2013052421,2013052422,2013052423,2013056288,2013040060,2013251084)
dot2 <- subset(dot,!TASLINKID %in% rm_taslink )
dot$TERRAIN[dot$TASLINKID %in% terrain_0_2] <- 2
dot$TERRAIN[dot$TASLINKID %in% terrain_0_1] <- 1
table(dot$TERRAIN)
dot2 <- subset(dot2,TERRAIN!=0)
table(dot2$TERRAIN)
dot3 <- subset(dot2,SYSCODE!=5)
table(dot3$SYSCODE)
getwd()
write.csv(dot3,file="data/completedata_nona.csv",row.names=FALSE)
dot <- read.csv("data/completedata_nona.csv")
table(dot$TERRAIN)
table(dot$SYSCODE)
table(dot$FEDFUNC)
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
summary(rpois(10000,3))
summary(rpois(10000,4))
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
check0(c(1,0,4,2,1))
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
cov(matrix(rnorm(30),ncol=3))
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
a=(matrix(rnorm(30),ncol=3))
cov(a)
cpp_cov(a)
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
cov(a)
cpp_cov2(a)
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc.cpp')

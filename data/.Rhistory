sigma2ees <- mcmc.list(mcmc(chain1$sigma2ees),mcmc(chain2$sigma2ees),mcmc(chain3$sigma2ees))
sigma2vee <- mcmc.list(mcmc(chain1$sigma2vee),mcmc(chain2$sigma2vee),mcmc(chain3$sigma2vee))
sigma2ves <- mcmc.list(mcmc(chain1$sigma2ves),mcmc(chain2$sigma2ves),mcmc(chain3$sigma2ves))
ree <- mcmc.list(mcmc(chain1$ree),mcmc(chain2$ree),mcmc(chain3$ree))
res <- mcmc.list(mcmc(chain1$res),mcmc(chain2$res),mcmc(chain3$res))
betaee <- mcmc.list(mcmc(chain1$betaee),mcmc(chain2$betaee),mcmc(chain3$betaee))
betaes <- mcmc.list(mcmc(chain1$betaes),mcmc(chain2$betaes),mcmc(chain3$betaes))
gammaee <- mcmc.list(mcmc(chain1$gammaee),mcmc(chain2$gammaee),mcmc(chain3$gammaee))
gammaes <- mcmc.list(mcmc(chain1$gammaes),mcmc(chain2$gammaes),mcmc(chain3$gammaes))
kee <- mcmc.list(mcmc(apply(chain1$ree,1,function(x) length(unique(x)))-1),mcmc(apply(chain2$ree,1,function(x) length(unique(x)))-1),mcmc(apply(chain3$ree,1,function(x) length(unique(x)))-1))
kes <- mcmc.list(mcmc(apply(chain1$res,1,function(x) length(unique(x)))-1),mcmc(apply(chain2$res,1,function(x) length(unique(x)))-1),mcmc(apply(chain3$res,1,function(x) length(unique(x)))-1))
a <- 14 # 17
c <- 195
ypredee1 <-  yee[a,1] #2500
ypredee2 <-  yee[296,1] #3200
ypredee3 <-  yee[c,1] #4000 #184
ypredes1 <-  yes[a,1]#-250
ypredes2 <-  yes[296,1]#320
ypredes3 <-  yes[c,1]#90
xtrueee1 <- xee[a]
xtrueee2 <- xee[296]
xtrueee3 <- xee[c]
xtruees1 <- xes[a]
xtruees2 <- xes[296]
xtruees3 <- xes[c]
dem1 <- Z[a,] #c(0,18,25)
dem2 <- Z[296,]#c(1,32,20)
dem3 <- Z[c,]#c(1,27,34)
nr <- 1000
ng <- apply(as.matrix(gammaee),1,function(x) sum(x!=0))
nges <- apply(as.matrix(gammaes),1,function(x) sum(x!=0))
nk <- as.numeric(as.matrix(kee))
nkes <- as.numeric(as.matrix(kes))
cee1 <- callibrate(ypredee1,dem1,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1000,max=4500)
cee2 <- callibrate(ypredee2,dem2,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1500,max=4500)
cee3 <- callibrate(ypredee3,dem3,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1500,max=4500)
ceei <- data.frame(t(apply(cbind(cee1,cee2,cee3),2,quantile,probs=c(0.025,0.5,0.975))))
names(ceei) <- c("Lower","Median","Upper")
ceei$Observed <- c(ypredee1,ypredee2,ypredee3)
ces1 <- callibrate(ypredes1,dem1,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-300,max=200)
ces2 <- callibrate(ypredes2,dem2,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-150,max=100)
ces3 <- callibrate(ypredes3,dem3,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-500,max=300)
cesi <- data.frame(t(apply(cbind(ces1,ces2,ces3),2,quantile,probs=c(0.025,0.5,0.975))))
names(cesi) <- c("Lower","Median","Upper")
cesi$Observed <- c(ypredes1,ypredes2,ypredes3)
dfcal <- data.frame(cbind(cee1,cee2,cee3,ces1,ces2,ces3))
names(dfcal) <- c("Calibrated EE 1","Calibrated EE 2","Calibrated EE 3","Calibrated ES 1","Calibrated ES 2","Calibrated ES 3")
mdfcal <- melt(dfcal)
mdfcal$obs <- c(rep(ypredee1,nr),rep(ypredee2,nr),rep(ypredee3,nr),rep(ypredes1,nr),rep(ypredes2,nr),rep(ypredes3,nr))
mdfcal$true <- c(rep(xtrueee1,nr),rep(xtrueee2,nr),rep(xtrueee3,nr),rep(xtruees1,nr),rep(xtruees2,nr),rep(xtruees3,nr))
ggplot(data=mdfcal) + geom_histogram(aes(x=value),bins=20) + geom_vline(aes(xintercept=obs),colour="red") + geom_vline(aes(xintercept=true),colour="blue",linetype=2) + facet_wrap(~variable,scales="free") + theme_bw()
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[100],xee[296],xee[184])
cesi$Truth <- c(xes[100],xes[296],xes[184])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
mdfcal$obs
ypredee1
ypredee2
ypredee3
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[a],xee[296],xee[c])
cesi$Truth <- c(xes[a],xes[296],xes[c])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
print(xtable(cesi,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap $\\Delta$ES measurements for Skewed Errors",label="calibratedes"),include.rownames=FALSE)
install.packages("stran")
install.packages("rstan")
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda = sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy = beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
library(rstan)
?stan
library(StanHeaders)
?stan
sessionInfo()
library(rstan)
sessionInfo()
library(rstan)
library(StanHeaders)
sessionInfo()
library(rstan)
sessionInfo()
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(inline)
fx <- cxxfunction(signature(x = "numeric"),'NumericVector xx(x);
return wrap(std::accumulate(xx.begin(), xx.end(), 0.0));',plugin = "Rcpp")
fx(c(1,2,3))
library(rstan)
library(ggplot2)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
?solve
library(rstan)
?stan
setwd("C:\\Users\\dcries\\github\\ra_dot\\data")
d <- read.csv('completedata_nona.csv')
d$ACCESSCNTL <- as.factor(d$ACCESSCNTL)
d$TRANSCENTE <- as.factor(d$TRANSCENTE)
d$lVOLUME <- log(as.numeric(d$VOLUME))
d$FEDFUNC2 <- as.factor(d$FEDFUNC2)
d$MEDTYPE2 <- as.factor(d$MEDTYPE2)
d$SYSCODE <- as.factor(d$SYSCODE)
d$TERRAIN <- as.factor(d$TERRAIN)
d$COMNETWORK <- as.factor(d$COMNETWORK)
d$NATHWYSYS <- as.factor(d$NATHWYSYS)
d$SHDTYPEL <- as.factor(d$SHDTYPEL)
d$SHDTYPER <- as.factor(d$SHDTYPER)
d$SURFTYPE2 <- 0
d$SURFTYPE2 <- replace(d$SURFTYPE2 , d$SURFTYPE%in%c(60,65,69,92) , 1 )
d$SURFTYPE2 <- replace(d$SURFTYPE2 , d$SURFTYPE%in%c(70,74,76,77,79) , 2 )
X <- as.data.frame(model.matrix(
~ TRANSCENTE+lVOLUME+FEDFUNC2+URBAN+
SURFTYPE2+lVOLUME*FEDFUNC2, data=d))
dim(X)
X <- as.data.frame(model.matrix(
~ TRANSCENTE+lVOLUME+FEDFUNC2+URBAN+
SURFTYPE2, data=d))
head(X)
dim(X)
dim(d)
X <- as.data.frame(model.matrix(
~ TRANSCENTE+lVOLUME+FEDFUNC2+URBAN+
SURFTYPE2, data=d))
out <- data.frame(X)
names(out)
out$year <- d$YEAR
out$taslinkid <- d$TASLINKID
out$xb <- X%*%c(-7.302,-.118,-.058,-.054,.209,.26,.971,.066,.443,-.005)
out$xb <- as.matrix(X)%*%c(-7.302,-.118,-.058,-.054,.209,.26,.971,.066,.443,-.005)
out$v <- 0
View(out)
out$lambda <- out$xb+out$v
out$xbv <- out$xb+out$v
out$lambda <- exp(out$xbv)
summary(out$lambda)
out$miles <- d$MILES
out$expcrash <- out$lambda*out$miles
summary(out$expcrash)
summary(out$miles)
summary(d$CRASHES)
load("C:/Users/dcries/workspace/fit_all.RData")
fit
load("\\\\my.files.iastate.edu\\Users\\dcries\\Desktop\\RA_DOT\\workspace\\fit_all.RData")
fit <- as.matrix(fit)
dim(fit)
head(fit)
fit <- fit[,1:10]
dim(fit)
dim(X)
big <- fit%*%X
big <- fit%*%as.numeric(X)
class(fit)
big <- fit%*%as.matrix(X)
dim(fit)
dim(X)
big <- fit%*%t(as.matrix(X))
dim(big)
cis <- apply(big,2,quantile,probs=c(0.025,0.975))
cis <- apply(big,2,quantile,probs=c(0.025,0.975))
quantile(big[,1],probs=c(0.025,0.975))
cis <- apply(big,2,quantile,probs=c(0.025,0.975))
summary(colMeans(big))
summary(exp(colMeans(big)))
summary(out$expcrash)
summary((colMeans(big)))
summary(out$xb)
cis <- matrix(0,nrow=2,ncol=ncol(big))
for(i in 1:ncol(big)){
cis[,i] <- quantile(big[,i],probs=c(0.025,0.975))
}
out$lb_lambda <- t(cis[1,])
dim(cis)
dim(out)
out$lb_lambda <- (cis[1,])
out$ub_lambda <- (cis[2,])
head(out)
out$lb_lambda <- exp(cis[1,])
out$ub_lambda <- exp(cis[2,])
head(out)
out$lb_expcrash <- out$lb_lambda*out$miles
out$ub_expcrash <- out$ub_lambda*out$miles
head(out)
getwd()
write.csv(out,file="example.csv",row.names=FALSE)
exp(8)
summary(d$VOLUME)
exp(6)
-7.302+6*.971
exp(-7.302+6*.971)
quanitle(fit%*%c(1,0,0,0,0,0,log(403),0,0,0),probs=c(0.025,0.975))
quantile(fit%*%c(1,0,0,0,0,0,log(403),0,0,0),probs=c(0.025,0.975))
exp(quantile(fit%*%c(1,0,0,0,0,0,log(403),0,0,0),probs=c(0.025,0.975)))
summary(d$VOLUME)
colMeans(fit))%*%c(1,0,0,0,0,1,log(7000),0,1,0
colMeans(fit)%*%c(1,0,0,0,0,1,log(7000),0,1,0)
round(exp((colMeans(fit)%*%c(1,0,0,0,0,1,log(7000),0,1,0)),4)
round(exp(colMeans(fit)%*%c(1,0,0,0,0,1,log(7000),0,1,0)),4)

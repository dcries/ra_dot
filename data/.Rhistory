cee3 <- callibrate(ypredee3,dem3,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1500,max=4500)
ceei <- data.frame(t(apply(cbind(cee1,cee2,cee3),2,quantile,probs=c(0.025,0.5,0.975))))
names(ceei) <- c("Lower","Median","Upper")
ceei$Observed <- c(ypredee1,ypredee2,ypredee3)
ces1 <- callibrate(ypredes1,dem1,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-300,max=200)
ces2 <- callibrate(ypredes2,dem2,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-150,max=100)
ces3 <- callibrate(ypredes3,dem3,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-500,max=300)
cesi <- data.frame(t(apply(cbind(ces1,ces2,ces3),2,quantile,probs=c(0.025,0.5,0.975))))
names(cesi) <- c("Lower","Median","Upper")
cesi$Observed <- c(ypredes1,ypredes2,ypredes3)
# c1 <- ggplot() +   geom_line(data = datee,aes(x = (xval), y = yval, group = variable),alpha=0.04) +
#      geom_segment(data=ceei,aes(x=Lower,xend=Upper,y=Observed,yend=Observed),colour="blue",size=1) +
#      geom_point(data=ceei,aes(x=Median,y=Observed),colour="red",size=2) + xlab("Truth") + ylab("Observed") + theme_bw()
#
# c2 <- ggplot() +   geom_line(data = dates,aes(x = (xval), y = yval, group = variable),alpha=0.04) +
#   geom_segment(data=cesi,aes(x=Lower,xend=Upper,y=Observed,yend=Observed),colour="blue",size=1) +
#   geom_point(data=cesi,aes(x=Median,y=Observed),colour="red",size=2) + xlab("Truth") + ylab("Observed") + theme_bw()
#   #geom_boxplot(aes(x=(cee1),y=(ypredee1))) + geom_boxplot(aes(x=cee2,y=ypredee2))
#
# grid.arrange(c1,c2,nrow=1)
dfcal <- data.frame(cbind(cee1,cee2,cee3,ces1,ces2,ces3))
names(dfcal) <- c("Calibrated EE 1","Calibrated EE 2","Calibrated EE 3","Calibrated ES 1","Calibrated ES 2","Calibrated ES 3")
mdfcal <- melt(dfcal)
mdfcal$obs <- c(rep(ypredee1,nr),rep(ypredee2,nr),rep(ypredee3,nr),rep(ypredes1,nr),rep(ypredes2,nr),rep(ypredes3,nr))
mdfcal$true <- c(rep(xtrueee1,nr),rep(xtrueee2,nr),rep(xtrueee3,nr),rep(xtruees1,nr),rep(xtruees2,nr),rep(xtruees3,nr))
ggplot(data=mdfcal) + geom_histogram(aes(x=value),bins=20) + geom_vline(aes(xintercept=obs),colour="red") + geom_vline(aes(xintercept=true),colour="blue",linetype=2) + facet_wrap(~variable,scales="free") + theme_bw()
ggplot(data=mdfcal) + geom_histogram(aes(x=value),bins=20) + geom_vline(aes(xintercept=obs),colour="red") + geom_vline(aes(xintercept=true),colour="blue",linetype=2) + facet_wrap(~variable,scales="free") + theme_bw()
a <- 14 # 17
c <- 195
ypredee1 <-  yee[a,1] #2500
ypredee2 <-  yee[296,1] #3200
ypredee3 <-  yee[c,1] #4000 #184
ypredes1 <-  yes[a,1]#-250
ypredes2 <-  yes[296,1]#320
ypredes3 <-  yes[c,1]#90
xtrueee1 <- xee[a]
xtrueee2 <- xee[296]
xtrueee3 <- xee[c]
xtruees1 <- xes[a]
xtruees2 <- xes[296]
xtruees3 <- xes[c]
dem1 <- Z[a,] #c(0,18,25)
dem2 <- Z[296,]#c(1,32,20)
dem3 <- Z[c,]#c(1,27,34)
nr <- 1000
ng <- apply(as.matrix(gammaee),1,function(x) sum(x!=0))
nges <- apply(as.matrix(gammaes),1,function(x) sum(x!=0))
nk <- as.numeric(as.matrix(kee))
nkes <- as.numeric(as.matrix(kes))
cee1 <- callibrate(ypredee1,dem1,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1000,max=4500)
latentxee <- mcmc.list(mcmc(chain1$latentxee),mcmc(chain2$latentxee),mcmc(chain3$latentxee))
latentxes <- mcmc.list(mcmc(chain1$latentxes),mcmc(chain2$latentxes),mcmc(chain3$latentxes))
muee <- mcmc.list(mcmc(chain1$muee),mcmc(chain2$muee),mcmc(chain3$muee))
mues <- mcmc.list(mcmc(chain1$mues),mcmc(chain2$mues),mcmc(chain3$mues))
sigma2xee <- mcmc.list(mcmc(chain1$sigma2xee),mcmc(chain2$sigma2xee),mcmc(chain3$sigma2xee))
sigma2xes <- mcmc.list(mcmc(chain1$sigma2xes),mcmc(chain2$sigma2xes),mcmc(chain3$sigma2xes))
corrx <- mcmc.list(mcmc(chain1$corrx),mcmc(chain2$corrx),mcmc(chain3$corrx))
meanfcnee <- mcmc.list(mcmc(chain1$meanfcnee),mcmc(chain2$meanfcnee),mcmc(chain3$meanfcnee))
meanfcnes <- mcmc.list(mcmc(chain1$meanfcnes),mcmc(chain2$meanfcnes),mcmc(chain3$meanfcnes))
sigma2eee <- mcmc.list(mcmc(chain1$sigma2eee),mcmc(chain2$sigma2eee),mcmc(chain3$sigma2eee))
sigma2ees <- mcmc.list(mcmc(chain1$sigma2ees),mcmc(chain2$sigma2ees),mcmc(chain3$sigma2ees))
sigma2vee <- mcmc.list(mcmc(chain1$sigma2vee),mcmc(chain2$sigma2vee),mcmc(chain3$sigma2vee))
sigma2ves <- mcmc.list(mcmc(chain1$sigma2ves),mcmc(chain2$sigma2ves),mcmc(chain3$sigma2ves))
ree <- mcmc.list(mcmc(chain1$ree),mcmc(chain2$ree),mcmc(chain3$ree))
res <- mcmc.list(mcmc(chain1$res),mcmc(chain2$res),mcmc(chain3$res))
betaee <- mcmc.list(mcmc(chain1$betaee),mcmc(chain2$betaee),mcmc(chain3$betaee))
betaes <- mcmc.list(mcmc(chain1$betaes),mcmc(chain2$betaes),mcmc(chain3$betaes))
gammaee <- mcmc.list(mcmc(chain1$gammaee),mcmc(chain2$gammaee),mcmc(chain3$gammaee))
gammaes <- mcmc.list(mcmc(chain1$gammaes),mcmc(chain2$gammaes),mcmc(chain3$gammaes))
kee <- mcmc.list(mcmc(apply(chain1$ree,1,function(x) length(unique(x)))-1),mcmc(apply(chain2$ree,1,function(x) length(unique(x)))-1),mcmc(apply(chain3$ree,1,function(x) length(unique(x)))-1))
kes <- mcmc.list(mcmc(apply(chain1$res,1,function(x) length(unique(x)))-1),mcmc(apply(chain2$res,1,function(x) length(unique(x)))-1),mcmc(apply(chain3$res,1,function(x) length(unique(x)))-1))
cee1 <- callibrate(ypredee1,dem1,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1000,max=4500)
names(chain1)
source('C:/Users/dcries/github/ebmodel/base_fcn.R', echo=TRUE)
cee1 <- callibrate(ypredee1,dem1,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1000,max=4500)
dim(as.matrix(latentxee))
ypredee1
dem1
cee1 <- callibrate(ypredee1,dem1,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1000,max=4500)
source('C:/Users/dcries/github/ebmodel/base_fcn.R', echo=TRUE)
Rcpp::sourceCpp('C:\\Users\\dcries\\github\\ebmodel\\bivar_bvnmcmc1_qp.cpp')
params <- c(100,50,300,14,-7,-200,8,-5)
#params <- c(100,50,300,14,-7,-200,8,-5)
simdata <- generate_data4(params,dist=2,nrep=2)
#simdata2 <- generate_data2(params,dist=1)
yee <- simdata$yee
yes <- simdata$yes
yeeb <- rowMeans(yee)
yesb <- rowMeans(yes)
xee <- simdata$xee
xes <- simdata$xes
wee <- simdata$wee
wes <- simdata$wes
n <- length(yeeb)
zg <- simdata$zg #<- rbinom(n,1,0.5) #gender indicator
zb <- simdata$zb#<- rnorm(n,27,5) #bmi
za <- simdata$za#<- runif(n,20,40) #age
Z= cbind(zg,zb,za)
#number of mcmc iterations after burn
ureps <- 2100
#tuning burnin
burn <- 2000
#number of iterations needed
nreps <- ureps+burn
#inital number of knots
currentkee <- 2;currentkee2 <- 1;currentkee3 <- 5
currentkes <- 2;currentkes2 <- 5;currentkes3 <- 1
#inital knot locations
#knots <- sort(x)[c(50,125,200,250)]
knotsee <- sort(wee)[c(50,200)];knotsee2 <- sort(wee)[c(200)];knotsee3 <- sort(wee)[c(10,50,100,200,250)]
knotses <- sort(wes)[c(50,200)];knotses2 <- sort(wes)[c(10,50,100,200,250)];knotses3 <- sort(wes)[c(50)]
#specified by Denison
ck <- 0.4
#number of continuous derivatives -1
l <- 3
#number of components
h <- 1#10
#sd for random walk
maxkt <- 15
#current latent variables x, used in lm(y~bs(x))
currentxee <- wee[,1];currentxee2 <- yee[,2];currentxee3 <- wee[,2]+rnorm(n,0,300)
currentxes <- wes[,1];currentxes2 <- yes[,1];currentxes3 <- wes[,2]+rnorm(n,0,100)
currentmuee <- rep(2600,h);currentmuee2 <- rep(1800,h);currentmuee3 <- rep(3600,h)#runif(h,1800,3800)
currentmues <- rep(0,h);currentmues2 <- rep(100,h);currentmues3 <- rep(-100,h)#runif(h,-400,400)
#currentmuee <- 2600#runif(h,1800,3800)
#currentmues <- 0#runif(h,-400,400)
currentpi <- rep(1/h,h)
currentzeta <- sample(1:h,n,replace=T)
currentv <- rep(0.3,h)
currentpredee <- wee[,1]
currentpredes <- wes[,1]
currentsigma2ee <- 400^2;currentsigma2ee2 <- 200^2;currentsigma2ee3 <- 600^2
currentsigma2ve <- 250^2;currentsigma2ve2 <- 150^2;currentsigma2ve3 <- 350^2
currentsigma2es <- 220^2;currentsigma2es2 <- 120^2;currentsigma2es3 <- 320^2
currentsigma2vs <- 80^2;currentsigma2vs2 <- 180^2;currentsigma2vs3 <- 30^2
currentalpha <- 1;currentalpha2 <- 4;currentalpha3 <- 0.3
tunevar = c(100^2,25^2)#c(100^2,25^2)
tunecor = -0.2
currentsigma2x <- c(400^2,400^2);currentsigma2x2 <- c(800^2,800^2);currentsigma2x3 <- c(100^2,100^2)
currentbetaee <- matrix(c(0,0,0),nrow=1);currentbetaee2 <- matrix(c(-50,-15,-15),nrow=1);currentbetaee3 <- matrix(c(100,15,15),nrow=1)
currentbetaes <- matrix(c(0,0,0),nrow=1);currentbetaes2 <- matrix(c(-100,-15,-15),nrow=1);currentbetaes3 <- matrix(c(100,15,15),nrow=1)
#priors
#lambda is value for mean of prior for number of knots
lambda <- 1
#priors for sigmae
ae <- 0.01;be <- 0.01
#priors for sigmav
av <- 0.01; bv <- 0.01
m <- c(2400,0)
v2 <- matrix(c(3000^2,0,0,1000^2),ncol=2,byrow=FALSE)
a_alp <- 1
b_alp <- 1
d <- 3#3
psi <- diag(2)
#prior variance for all coefficients
Vb <- 100000
Mb <- 0
ck <- 0.4
initial <- list(currentkee=currentkee,currentkes=currentkes,ck=ck,knotsee=knotsee,
knotses=knotses,currentxee=currentxee,currentxes=currentxes,
currentv=currentv,currentpi=currentpi,currentalpha=currentalpha,
currentzeta=currentzeta,currentpredee=currentpredee,currentpredes=currentpredes,
currentmuee=currentmuee,currentmues=currentmues,currentsigma2ee=currentsigma2ee,
currentsigma2es=currentsigma2es,currentsigma2ve=currentsigma2ve,
currentsigma2vs=currentsigma2vs,currentsigma2x=currentsigma2x,
tunevar=tunevar,currentbetaee=currentbetaee,currentbetaes=currentbetaes,
tunecor=tunecor)
initial2 <- list(currentkee=currentkee2,currentkes=currentkes2,ck=ck,knotsee=knotsee2,
knotses=knotses2,currentxee=currentxee2,currentxes=currentxes2,
currentv=currentv,currentpi=currentpi,currentalpha=currentalpha2,
currentzeta=currentzeta,currentpredee=currentpredee,currentpredes=currentpredes,
currentmuee=currentmuee2,currentmues=currentmues2,currentsigma2ee=currentsigma2ee2,
currentsigma2es=currentsigma2es2,currentsigma2ve=currentsigma2ve2,
currentsigma2vs=currentsigma2vs2,currentsigma2x=currentsigma2x2,
tunevar=tunevar,currentbetaee=currentbetaee2,currentbetaes=currentbetaes2,
tunecor=tunecor)
initial3 <- list(currentkee=currentkee3,currentkes=currentkes3,ck=ck,knotsee=knotsee3,
knotses=knotses3,currentxee=currentxee3,currentxes=currentxes3,
currentv=currentv,currentpi=currentpi,currentalpha=currentalpha3,
currentzeta=currentzeta,currentpredee=currentpredee,currentpredes=currentpredes,
currentmuee=currentmuee3,currentmues=currentmues3,currentsigma2ee=currentsigma2ee3,
currentsigma2es=currentsigma2es3,currentsigma2ve=currentsigma2ve3,
currentsigma2vs=currentsigma2vs3,currentsigma2x=currentsigma2x3,
tunevar=tunevar,currentbetaee=currentbetaee3,currentbetaes=currentbetaes3,
tunecor=tunecor)
prior <- list(lambda=lambda,ae=ae,be=be,av=av,bv=bv,a_alp=a_alp,
b_alp=b_alp,d=d,m=m,v2=v2,psi=psi,Vb=Vb,Mb=Mb)
chain1=mcmc_bvn_qp(yee,yes,wee,wes,Z,initial,prior,nreps,burn,maxkt,my_bs,my_qp)
chain2=mcmc_bvn_qp(yee,yes,wee,wes,Z,initial2,prior,nreps,burn,maxkt,my_bs,my_qp)
chain3=mcmc_bvn_qp(yee,yes,wee,wes,Z,initial3,prior,nreps,burn,maxkt,my_bs,my_qp)
latentxee <- mcmc.list(mcmc(chain1$latentxee),mcmc(chain2$latentxee),mcmc(chain3$latentxee))
latentxes <- mcmc.list(mcmc(chain1$latentxes),mcmc(chain2$latentxes),mcmc(chain3$latentxes))
muee <- mcmc.list(mcmc(chain1$muee),mcmc(chain2$muee),mcmc(chain3$muee))
mues <- mcmc.list(mcmc(chain1$mues),mcmc(chain2$mues),mcmc(chain3$mues))
sigma2xee <- mcmc.list(mcmc(chain1$sigma2xee),mcmc(chain2$sigma2xee),mcmc(chain3$sigma2xee))
sigma2xes <- mcmc.list(mcmc(chain1$sigma2xes),mcmc(chain2$sigma2xes),mcmc(chain3$sigma2xes))
corrx <- mcmc.list(mcmc(chain1$corrx),mcmc(chain2$corrx),mcmc(chain3$corrx))
meanfcnee <- mcmc.list(mcmc(chain1$meanfcnee),mcmc(chain2$meanfcnee),mcmc(chain3$meanfcnee))
meanfcnes <- mcmc.list(mcmc(chain1$meanfcnes),mcmc(chain2$meanfcnes),mcmc(chain3$meanfcnes))
sigma2eee <- mcmc.list(mcmc(chain1$sigma2eee),mcmc(chain2$sigma2eee),mcmc(chain3$sigma2eee))
sigma2ees <- mcmc.list(mcmc(chain1$sigma2ees),mcmc(chain2$sigma2ees),mcmc(chain3$sigma2ees))
sigma2vee <- mcmc.list(mcmc(chain1$sigma2vee),mcmc(chain2$sigma2vee),mcmc(chain3$sigma2vee))
sigma2ves <- mcmc.list(mcmc(chain1$sigma2ves),mcmc(chain2$sigma2ves),mcmc(chain3$sigma2ves))
ree <- mcmc.list(mcmc(chain1$ree),mcmc(chain2$ree),mcmc(chain3$ree))
res <- mcmc.list(mcmc(chain1$res),mcmc(chain2$res),mcmc(chain3$res))
betaee <- mcmc.list(mcmc(chain1$betaee),mcmc(chain2$betaee),mcmc(chain3$betaee))
betaes <- mcmc.list(mcmc(chain1$betaes),mcmc(chain2$betaes),mcmc(chain3$betaes))
gammaee <- mcmc.list(mcmc(chain1$gammaee),mcmc(chain2$gammaee),mcmc(chain3$gammaee))
gammaes <- mcmc.list(mcmc(chain1$gammaes),mcmc(chain2$gammaes),mcmc(chain3$gammaes))
kee <- mcmc.list(mcmc(apply(chain1$ree,1,function(x) length(unique(x)))-1),mcmc(apply(chain2$ree,1,function(x) length(unique(x)))-1),mcmc(apply(chain3$ree,1,function(x) length(unique(x)))-1))
kes <- mcmc.list(mcmc(apply(chain1$res,1,function(x) length(unique(x)))-1),mcmc(apply(chain2$res,1,function(x) length(unique(x)))-1),mcmc(apply(chain3$res,1,function(x) length(unique(x)))-1))
a <- 14 # 17
c <- 195
ypredee1 <-  yee[a,1] #2500
ypredee2 <-  yee[296,1] #3200
ypredee3 <-  yee[c,1] #4000 #184
ypredes1 <-  yes[a,1]#-250
ypredes2 <-  yes[296,1]#320
ypredes3 <-  yes[c,1]#90
xtrueee1 <- xee[a]
xtrueee2 <- xee[296]
xtrueee3 <- xee[c]
xtruees1 <- xes[a]
xtruees2 <- xes[296]
xtruees3 <- xes[c]
dem1 <- Z[a,] #c(0,18,25)
dem2 <- Z[296,]#c(1,32,20)
dem3 <- Z[c,]#c(1,27,34)
nr <- 1000
ng <- apply(as.matrix(gammaee),1,function(x) sum(x!=0))
nges <- apply(as.matrix(gammaes),1,function(x) sum(x!=0))
nk <- as.numeric(as.matrix(kee))
nkes <- as.numeric(as.matrix(kes))
cee1 <- callibrate(ypredee1,dem1,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1000,max=4500)
cee2 <- callibrate(ypredee2,dem2,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1500,max=4500)
cee3 <- callibrate(ypredee3,dem3,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1500,max=4500)
ceei <- data.frame(t(apply(cbind(cee1,cee2,cee3),2,quantile,probs=c(0.025,0.5,0.975))))
names(ceei) <- c("Lower","Median","Upper")
ceei$Observed <- c(ypredee1,ypredee2,ypredee3)
ces1 <- callibrate(ypredes1,dem1,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-300,max=200)
ces2 <- callibrate(ypredes2,dem2,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-150,max=100)
ces3 <- callibrate(ypredes3,dem3,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-500,max=300)
cesi <- data.frame(t(apply(cbind(ces1,ces2,ces3),2,quantile,probs=c(0.025,0.5,0.975))))
names(cesi) <- c("Lower","Median","Upper")
cesi$Observed <- c(ypredes1,ypredes2,ypredes3)
dfcal <- data.frame(cbind(cee1,cee2,cee3,ces1,ces2,ces3))
names(dfcal) <- c("Calibrated EE 1","Calibrated EE 2","Calibrated EE 3","Calibrated ES 1","Calibrated ES 2","Calibrated ES 3")
mdfcal <- melt(dfcal)
mdfcal$obs <- c(rep(ypredee1,nr),rep(ypredee2,nr),rep(ypredee3,nr),rep(ypredes1,nr),rep(ypredes2,nr),rep(ypredes3,nr))
mdfcal$true <- c(rep(xtrueee1,nr),rep(xtrueee2,nr),rep(xtrueee3,nr),rep(xtruees1,nr),rep(xtruees2,nr),rep(xtruees3,nr))
ggplot(data=mdfcal) + geom_histogram(aes(x=value),bins=20) + geom_vline(aes(xintercept=obs),colour="red") + geom_vline(aes(xintercept=true),colour="blue",linetype=2) + facet_wrap(~variable,scales="free") + theme_bw()
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[100],xee[296],xee[184])
cesi$Truth <- c(xes[100],xes[296],xes[184])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
mdfcal$obs
ypredee1
ypredee2
ypredee3
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[a],xee[296],xee[c])
cesi$Truth <- c(xes[a],xes[296],xes[c])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
print(xtable(cesi,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap $\\Delta$ES measurements for Skewed Errors",label="calibratedes"),include.rownames=FALSE)
install.packages("stran")
install.packages("rstan")
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda = sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy = beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
library(rstan)
setwd("C:\\Users\\dcries\\github\\ra_dot\\data")
load("//my.files.iastate.edu/Users/dcries/Desktop/RA_DOT/neighbors.RData")
d <- read.csv('completedata_nona.csv')
d$ACCESSCNTL <- as.factor(d$ACCESSCNTL)
d$TRANSCENTE <- as.factor(d$TRANSCENTE)
d$VOLUME <- as.numeric(d$VOLUME)
X <- as.data.frame(model.matrix(
~ ACCESSCNTL+TRANSCENTE+VOLUME, data=d))
dataList = list(
Y = d$FATMAJCRASHES,
N = length(d$CRASHES),
ljno0=ljno0,
lj0=lj0 ,
lu = lu,
log_l = log(d$MILES),
X = X,
K = length(X[1,]),
Nseg=length(unique(d$TASLINKID)),
j = j, k=k,
w=w,
scolw = scolw,
omub=omub,nomub=nomub,
lomub=length(omub),lnomub=length(nomub)
)
fit <- stan(file = '..\\Model12_Fitting_5.stan',
data = dataList,
#pars="Beta",
pars=c("Beta","lambda"),
chains = 1, iter=100)   ##Compiling the model
install.packages("StanHeaders")
library(StanHeaders)
fit <- stan(file = '..\\Model12_Fitting_5.stan',
data = dataList,
#pars="Beta",
pars=c("Beta","lambda"),
chains = 1, iter=100)   ##Compiling the model
?stan
library(inline)
fx <- cxxfunction(signature(x = "numeric"),'NumericVector xx(x);
return wrap(std::accumulate(xx.begin(), xx.end(), 0.0));',plugin = "Rcpp")
fx(c(1,2,3))
fit <- stan(file = '..\\Model12_Fitting_5.stan',
data = dataList,
#pars="Beta",
pars=c("Beta","lambda"),
chains = 1, iter=100)   ##Compiling the model
library(StanHeaders)
fit <- stan(file = '..\\Model12_Fitting_5.stan',
data = dataList,
#pars="Beta",
pars=c("Beta","lambda"),
chains = 1, iter=100)   ##Compiling the model
library(rstan)
fit <- stan(file = '..\\Model12_Fitting_5.stan',
data = dataList,
#pars="Beta",
pars=c("Beta","lambda"),
chains = 1, iter=100)   ##Compiling the model
ljno0
lj0
omub
nomub
lu
com
markov
j
aux
j0
jno0
(1:length(d$VOLUME))[aux_scolw==0]
(1:length(d$VOLUME))[aux_scolw>0]
length(aux_scolw)
setwd("C:\\Users\\dcries\\github\\ra_dot\\data")
d <- read.csv('completedata_nona.csv')
table(scolw)
dim(scolw)
class(scolw)
length(j)
dim(w)
View(w)
Nseg
length(unique(d$TASLINKID))
ljno0
lj0
lu
